isMirror Method:
    This method checks if two trees are mirror images of each other.
    It takes in two nodes, node1 and node2.
    If both nodes are null, they are mirror images, so it returns true.
    If only one of the nodes is null, they can't be mirror images, so it returns false.
    It checks if the current nodes' values are equal and their subtrees are mirror images of each other by recursively calling isMirror for their respective children:
    node1.left and node2.right
    node1.right and node2.left
    It returns true only if the current nodes' values match, and their subtrees are mirror images.

isSymmetric Method:
    This method checks whether the tree is symmetric or not by invoking the isMirror method.
    If the root node is null, the tree is considered symmetric, so it returns true.
    It checks if the left and right subtrees are mirror images using the isMirror method and returns the result.

Time Complexity:
    The time complexity of both methods (isMirror and isSymmetric) is O(N)
