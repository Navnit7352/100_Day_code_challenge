Class treeInfo:
    It holds references to the head and tail nodes of the doubly linked list.
    The treeInfo constructor initializes these head and tail nodes.

inOrder Function:
    Recursively performs an in-order traversal of the binary tree.
    Base case: If the current node is null, it returns a treeInfo object with both head and tail as null.
    It recursively traverses the left subtree and stores the resulting linked list in left.
    Creates a new node with the data from the current root.

Handles linking:
    If there's a tail node in the left subtree, it links it to the new node.
    Sets the left pointer of the new node to the tail of the left subtree.
    Recursively traverses the right subtree and stores the resulting linked list in right.
    Links the new node to the head of the right subtree.
    Handles the determination of the output head and tail nodes:
    Updates outputHead and outputTail based on conditions when either the left or right linked lists are null.
    Returns a treeInfo object with the determined outputHead and outputTail.

bTreeToClist Function:
    Calls the inOrder function to obtain the treeInfo object containing the linked list.
    Performs final linking: Connects the tail to the head and the head to the tail, effectively forming a circular doubly linked list.
    Returns the head node of the created circular doubly linked list.

Time Complexity:
    The time complexity of this algorithm is O(N), where N is the number of nodes in the binary tree.
