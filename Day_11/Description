Initialization:
    Declare a temp variable and set it as the input head of the doubly linked list.

While Loop:
    The loop traverses through the list until temp.next becomes null.
    Within the loop:
    Node t = temp.prev;: Store the reference to the previous node of the current temp.
    temp.prev = temp.next;: Reverse the prev pointer to point to the next node.
    temp.next = t;: Reverse the next pointer to point to the previous node.
    temp = temp.prev;: Move temp to the next node.

Handling the Last Node:
    Outside the loop, handle the last node separately:
    Node t = temp.prev;: Store the reference to the previous node of the last temp.
    temp.prev = temp.next;: Reverse the prev pointer of the last node.
    temp.next = t;: Reverse the next pointer of the last node.

time complexity
    The while loop traverses the entire list once, so it runs in O(n) time, where n is the number of nodes in the doubly linked list.
    Within the loop, there are constant-time operations such as pointer assignments, so each iteration takes O(1) time.
