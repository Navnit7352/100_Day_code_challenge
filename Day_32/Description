sortBySetBitCount:
    This method takes an array of integers (arr) and its length (n) as parameters. 
    It sorts the array using Arrays.sort and passes an instance of MyComparator to define the sorting logic.

MyComparator class:
    This class implements the Comparator interface for integers. 
    The compare method calculates the number of set bits in each integer using bit manipulation.
    The compare method first counts the number of set bits in i1 and i2 using bitwise AND operations
    (&) with 1 and then right-shifting the integers until they become zero.
    It computes count1 and count2, representing the number of set bits in i1 and i2 respectively.

Finally, 
    it returns the difference between count2 and count1. This difference determines the sorting order, 
    ensuring that integers with fewer set bits appear before those with more set bits.

Time Complexity:
    The time complexity of sorting an array of n integers using this approach is dominated by the sorting algorithm itself,
    which is Arrays.sort in this case. The complexity of Arrays.sort in the worst case is O(n log n)
